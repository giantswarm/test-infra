# Copyright 2018 The Kubernetes Authors All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: test-infra
  name: "deck"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: test-infra
  name: "deck"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "deck"
subjects:
  - kind: ServiceAccount
    name: "deck"
    namespace: test-infra
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: test-workloads
  name: "deck"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "deck"
subjects:
  - kind: ServiceAccount
    name: "deck"
    namespace: test-infra
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: test-infra
  name: "deck"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - get
      - list
      - watch
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: test-workloads
  name: "deck"
rules:
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
---
apiVersion: v1
kind: Service
metadata:
  name: deck
  namespace: test-infra
spec:
  selector:
    app: deck
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: test-infra
  name: deck
  labels:
    app: deck
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start
    nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
spec:
  ingressClassName: nginx
  rules:
    - host: prow.giantswarm.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: deck
                port:
                  number: 80
    - host: prow.rfjh2.k8s.gorilla.eu-central-1.aws.gigantic.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: deck
                port:
                  number: 80
  tls:
    - hosts:
        - prow.rfjh2.k8s.gorilla.eu-central-1.aws.gigantic.io
        - prow.giantswarm.io
      secretName: prow-deck
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: deck-oauth2-proxy
  ## Oauth2 is deployed under monitoring and it is required
  ## that the Ingress is in the same ns of the Service
  ##
  namespace: test-infra
  labels:
    app: deck
  annotations:
    kubernetes.io/tls-acme: "true"
spec:
  ingressClassName: nginx
  rules:
    - host: prow.giantswarm.io
      http:
        paths:
          - path: /oauth2
            pathType: Prefix
            backend:
              service:
                name: g8s-oauth2-proxy
                port:
                  number: 4180
    - host: prow.rfjh2.k8s.gorilla.eu-central-1.aws.gigantic.io
      http:
        paths:
          - path: /oauth2
            pathType: Prefix
            backend:
              service:
                name: g8s-oauth2-proxy
                port:
                  number: 4180
  tls:
    - hosts:
        - prow.rfjh2.k8s.gorilla.eu-central-1.aws.gigantic.io
        - prow.giantswarm.io
      secretName: prow-deck
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deck
  namespace: test-infra
  labels:
    app: deck
spec:
  replicas: 3
  selector:
    matchLabels:
      app: deck
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: deck
    spec:
      serviceAccountName: "deck"
      terminationGracePeriodSeconds: 30
      containers:
        - name: deck
          image: gcr.io/k8s-prow/deck:v20200813-535fb53bd1
          args:
            - --tide-url=http://tide/
            - --hook-url=http://hook:8888/plugin-help
            - --config-path=/etc/config/configs.yaml
            - --plugin-config=/etc/plugins/plugins.yaml
            - --github-endpoint=http://ghproxy
            - --github-endpoint=https://api.github.com
            - --github-token-path=/etc/github/oauth
          ports:
            - name: http
              containerPort: 8080
          securityContext:
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: oauth
              mountPath: /etc/github
              readOnly: true
            - name: configs
              mountPath: /etc/config
              readOnly: true
            - name: plugins
              mountPath: /etc/plugins
              readOnly: true
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 3
            timeoutSeconds: 600
      volumes:
        - name: oauth
          secret:
            secretName: oauth-token
        - name: configs
          configMap:
            name: prowconfig
        - name: plugins
          configMap:
            name: prowplugins
