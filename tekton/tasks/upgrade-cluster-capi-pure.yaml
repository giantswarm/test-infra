apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: upgrade-cluster-capi-pure
  namespace: test-workloads
spec:
  volumes:
    - name: kubeconfig
      secret:
        secretName: standup-kubeconfig
  workspaces:
  - name: cluster
    description: Cluster information is stored here.
  params:
  - name: cluster-id
    type: string
    description: Cluster ID for the cluster that will be upgraded.
  - name: provider
    type: string
  - name: organization
    type: string
  - name: cluster-app-chart-version
    type: string
    description: Version for the cluster app.
  - name: cluster-app-catalog
    type: string
    default: cluster-test
    description: App catalog to use for the cluster app.
  - name: default-apps-chart-version
    type: string
    description: Version for the default-apps app.
  steps:
  - name: upgrade-cluster
    image: quay.io/giantswarm/standup:3.2.0
    volumeMounts:
    - name: kubeconfig
      mountPath: /etc/kubeconfig
    script: |
      #! /bin/sh

      set -eo pipefail
      
      if [ -z "$(params.cluster-app-chart-version)" ]; then
        appName="$(params.cluster-id)-default-apps"
        appVersionToUpgradeTo="$(params.default-apps-chart-version)"
      else
        appName="$(params.cluster-id)"
        appVersionToUpgradeTo="$(params.cluster-app-chart-version)"
      fi

      echo "$(date): Upgrading '$appName' App to version '$appVersionToUpgradeTo'"
      kubectl --kubeconfig /etc/kubeconfig/$(params.provider) patch apps -n org-$(params.organization) $appName --type json -p '[{"op": "replace", "path": "/spec/version", "value": "'${appVersionToUpgradeTo}'"}, {"op": "replace", "path": "/spec/catalog", "value": $(params.cluster-app-catalog)}]'

      while [ `kubectl --kubeconfig /etc/kubeconfig/$(params.provider) get apps -n org-$(params.organization) $appName -o json | jq -r '.status.version'` != "$appVersionToUpgradeTo" ] || [ `kubectl --kubeconfig /etc/kubeconfig/$(params.provider) get apps -n org-$(params.organization) $appName -o json | jq -r '.status.release.status'` != "deployed" ]
      do
        echo "$(date): App '$appName' still uses old version or has failed"
        echo "$(date): Version: $(kubectl --kubeconfig /etc/kubeconfig/$(params.provider) get apps -n org-$(params.organization) $appName -o jsonpath='{.status.version}')"
        echo "$(date): Status: $(kubectl --kubeconfig /etc/kubeconfig/$(params.provider) get apps -n org-$(params.organization) $appName -o jsonpath='{.status.release.status}')"
        sleep 10
      done
