apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-release
  namespace: test-workloads
spec:
  params:
    - name: pipeline-name
      type: string
      default: "generic"
      description: Name of the pipeline running this task.
  resources:
    inputs:
    - name: releases
      type: git
  volumes:
  - name: endpoints-config
    secret:
      secretName: standup-endpoints-config
  - name: kubeconfig
    secret:
      secretName: standup-kubeconfig
  workspaces:
  - name: cluster
    description: Cluster information is stored here.
  results:
  - name: release-id
    description: The ID of the created release.
  steps:
  - name: chown-releases
    command:
    - chown
    - -R
    - 1000:1000
    - /workspace
    image: quay.io/giantswarm/standup:3.4.2
    securityContext:
      runAsUser: 0
      runAsGroup: 0
  - name: create-release
    image: quay.io/giantswarm/kubectl-gs:2.37.0
    env:
      - name: PIPELINE_NAME
        value: $(params.pipeline-name)
    volumeMounts:
      - name: endpoints-config
        mountPath: /etc/endpoints-config
      - name: kubeconfig
        mountPath: /etc/kubeconfig
    script: |
      #! /bin/sh
      set -e

      echo "Pipeline Name: ${PIPELINE_NAME}"

      apk add --no-cache git yq

      cd /workspace/releases
      git config --global --add safe.directory /workspace/releases

      log () {
        echo "$(date +'%F %T') - $@"
      }

      output="$(workspaces.cluster.path)/release-id"

      log "Detecting release version to be tested from PR"

      git fetch --unshallow origin master
      base="$(git merge-base HEAD origin/master)"
      line="$(git diff --name-status "${base}" --diff-filter=A --no-renames HEAD|grep release.yaml|head -n1|awk '{print $2}')"
      provider="$(echo "${line}"|cut -d"/" -f1)"
      release="$(echo "${line}"|cut -d"/" -f2)"

      check="$(echo "${release}" | sed 's/v[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+/ok/')"
      if [ "${check}" != "ok" ]
      then
        log "Cannot detect release to be tested from git repo"
        exit 1
      fi

      check="$(echo "${provider}"  | sed 's/azure/ok/' | sed 's/aws/ok/')"
      if [ "${check}" != "ok" ]
      then
        log "Invalid provider detected. Got '$provider', but only 'aws' and 'azure' are supported."
        exit 2
      fi

      log "Found release to be tested: ${provider}/${release}"

      new="$(echo "${release}-$(date +'%s')$(echo $RANDOM | md5sum | head -c 5)")"

      log "Creating release ${new} using ${release} as source"

      export KUBECONFIG="/etc/kubeconfig/${PIPELINE_NAME}"

      yaml="$(cat "${provider}/${release}/release.yaml" | yq -M ".metadata.name=\"${new}\"" | yq -M .metadata.labels.testing="\"true\"")"

      echo "${yaml}" | kubectl apply -f -

      echo "${new}" >$output

      ready=""
      while [ "${ready}" != "true" ]
      do
        log "Release is not ready yet (looking for .status.ready field to be 'ready', was '$ready')"
        ready="$(kubectl get release $new -o yaml | yq .status.ready)"
        sleep 10
      done

      log "Release is ready"

      echo -n "${new}" > $(results.release-id.path)

      echo "${PIPELINE_NAME}"> $(workspaces.cluster.path)/installation
      echo "${provider}"> $(workspaces.cluster.path)/provider
