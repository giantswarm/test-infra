apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-release
  namespace: test-workloads
spec:
  params:
    - name: PROVIDER
      type: string
      default: ""
      description: Name of the provider (either 'aws' or 'azure')
    - name: MC_KUBECONFIG
      type: string
      description: "Path of kubeconfig file to access test management cluster"
    - name: RELEASE
      type: string
      description: "Name of the legacy GS release (example: 19.1.0)"
  resources:
    inputs:
    - name: releases
      type: git
  results:
  - name: release
    description: ID of the temporary release used in this test
  volumes:
  - name: endpoints-config
    secret:
      secretName: standup-endpoints-config
  - name: kubeconfig
    secret:
      secretName: standup-kubeconfig
  workspaces:
  - name: cluster
    description: Cluster information is stored here.
  steps:
  - name: chown-releases
    command:
    - chown
    - -R
    - 1000:1000
    - /workspace
    image: quay.io/giantswarm/standup:3.4.2
    securityContext:
      runAsUser: 0
      runAsGroup: 0
  - name: create-release
    image: quay.io/giantswarm/kubectl-gs:2.41.1
    env:
      - name: PROVIDER
        value: $(params.PROVIDER)
      - name: KUBECONFIG
        value: $(params.MC_KUBECONFIG)
      - name: RELEASE
        value: $(params.RELEASE)
    volumeMounts:
      - name: endpoints-config
        mountPath: /etc/endpoints-config
      - name: kubeconfig
        mountPath: /etc/kubeconfig
    script: |
      #! /bin/sh
      set -e

      log () {
        echo "$(date +'%F %T') - $@"
      }

      echo "Provider: '${PROVIDER}'"
      echo "MC Kubeconfig path: '${KUBECONFIG}'"
      echo "RELEASE: '${RELEASE}'"

      apk add --no-cache git yq

      cd /workspace/releases

      new="$(echo "${RELEASE}-$(date +'%s')$(echo $RANDOM | md5sum | head -c 5)")"

      log "Creating release ${new} using ${RELEASE} as source"

      yaml="$(cat "${PROVIDER}/${RELEASE}/release.yaml" | yq -M ".metadata.name=\"${new}\"" | yq -M .metadata.labels.testing="\"true\"")"

      echo "${yaml}" | kubectl apply -f -

      echo -n "${new}" >$(results.release.path)

      ready=""
      while [ "${ready}" != "true" ]
      do
        log "Release is not ready yet (looking for .status.ready field to be 'true', was '$ready')"
        ready="$(kubectl get release $new -o yaml | yq .status.ready)"
        sleep 10
      done

      log "Release is ready"
