apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: upgrade-cluster
  namespace: test-workloads
spec:
  volumes:
    - name: kubeconfig
      secret:
        secretName: standup-kubeconfig
  workspaces:
  - name: cluster
    description: Cluster information is stored here.
  params:
  - name: MC_KUBECONFIG
    type: string
    description: "Path of kubeconfig file to access test management cluster"
  - name: RELEASE
    type: string
    description: Release ID to use when creating the cluster.
  steps:
  - name: upgrade-cluster
    image: quay.io/giantswarm/standup:3.4.2
    securityContext:
      runAsUser: 0
    volumeMounts:
    - name: kubeconfig
      mountPath: /etc/kubeconfig
    env:
    - name: KUBECONFIG
      value: $(params.MC_KUBECONFIG)
    - name: CLUSTER_ID_PATH
      value: $(workspaces.cluster.path)/cluster-id
    - name: RELEASE
      value: $(params.RELEASE)
    - name: WC_KUBECONFIG
      value: "$(workspaces.cluster.path)/kubeconfig"
    script: |
      #! /bin/sh

      set -eo pipefail

      CLUSTER_ID="$(cat "${CLUSTER_ID_PATH}")"

      CLUSTER_NAMESPACE=$(kubectl get clusters.cluster.x-k8s.io -A | grep ${CLUSTER_ID} | awk '{print $1}')

      echo "$(date): Upgrading cluster ${CLUSTER_ID} to ${RELEASE}"
      # Remove initial "v" from RELEASE
      release="$(echo "${RELEASE#"v"}")"

      kubectl_retry() {
        set +e
        for i in 1 2 3 4 5; do
          kubectl $@ && break
          echo "Command 'kubectl $@' failed, trying again in 60 seconds"
          sleep 1
        done
        set -e
      }

      # label all worker nodes with "old=true" to be able to detect when all nodes have been rolled.
      kubectl_retry --kubeconfig ${WC_KUBECONFIG} label no -l node-role.kubernetes.io/worker="" old=true

      total="$(kubectl --kubeconfig ${WC_KUBECONFIG} get no -l node-role.kubernetes.io/worker="" -o json |jq '.items |length')"

      # Update cluster label to trigger upgrade
      # Cluster conditions might not be clear yet, so we retry a few times
      set +e
      for i in $(seq 1 10)
      do
        kubectl -n${CLUSTER_NAMESPACE} patch clusters.cluster.x-k8s.io/${CLUSTER_ID} -p "{\"metadata\":{\"labels\":{\"release.giantswarm.io/version\": \"${release}\"}}}" --type=merge && break
        echo "Error triggering the upgrade, retrying in 5 minutes"
        sleep 300
      done

      while : ; do
        outdated="$(kubectl --kubeconfig ${WC_KUBECONFIG} get no -l old==true -o json)"

        if [ $? -ne 0 ]
        then
          echo "Unable to connect to kubernetes API, waiting"
          sleep 10
          continue
        fi

        outdated=$(echo "${outdated}" | jq '.items |length')

        echo "${outdated}/${total} worker nodes are pending update/rolling"

        if [ "${outdated}" -gt 0 ]
        then
          sleep 10
        else
          break
        fi
      done

      echo "Upgrade completed"

