apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cncf
  namespace: test-workloads
spec:
  workspaces:
  - name: cluster
    description: Cluster information is stored here.
  params:
  - name: PROVIDER
    type: string
    default: ""
    description: Name of the provider (either 'aws' or 'azure')
  - name: REGION
    type: string
    default: "default"
    description: Name of the AWS provider (can be 'default', meaning frankfurt, or 'china')
  - name: MC_KUBECONFIG
    type: string
    description: "Path of kubeconfig file to access test management cluster"
  steps:
  - name: mute-kyverno
    image: gsoci.azurecr.io/giantswarm/kubectl-gs:2.55.0
    env:
      - name: MC_KUBECONFIG
        value: $(params.MC_KUBECONFIG)
      - name: "WC_KUBECONFIG"
        value: $(workspaces.cluster.path)/kubeconfig
      - name: CLUSTER_ID_PATH
        value: $(workspaces.cluster.path)/cluster-id
    volumeMounts:
      - mountPath: /etc/kubeconfig
        name: kubeconfig
    script: |
      #! /bin/sh
      export WC_CLUSTER_ID="$(cat $CLUSTER_ID_PATH)"
      echo "WC Kubeconfig path: '${WC_KUBECONFIG}'"
      echo "MC Kubeconfig path: '${MC_KUBECONFIG}'"
      echo "WC cluster ID: '${WC_CLUSTER_ID}'"

      val=$(cat <<-END
      global:
        podSecurityStandards:
          enforced: true
      kyverno:
        config:
          webhooks:
          - namespaceSelector:
              matchExpressions:
              - key: e2e-run
                operator: DoesNotExist
      END
      )
      kubectl --kubeconfig "${MC_KUBECONFIG}" -n ${WC_CLUSTER_ID} delete cm kyverno-user-values
      echo "$val" | kubectl --kubeconfig "${MC_KUBECONFIG}" -n ${WC_CLUSTER_ID} create cm kyverno-user-values --from-file=values=/dev/stdin

      PSS=$(cat <<-END
      apiVersion: kyverno.io/v2alpha1
      kind: PolicyException
      metadata:
        name: sonobuoy-policy-exceptions
        namespace: giantswarm
      spec:
        background: true
        exceptions:
        - policyName: disallow-capabilities
          ruleNames:
          - '*'
        - policyName: disallow-capabilities-strict
          ruleNames:
          - '*'
        - policyName: disallow-host-namespaces
          ruleNames:
          - '*'
        - policyName: disallow-host-path
          ruleNames:
          - '*'
        - policyName: disallow-host-ports
          ruleNames:
          - '*'
        - policyName: disallow-host-process
          ruleNames:
          - '*'
        - policyName: disallow-noisy-policy-contexts
          ruleNames:
          - '*'
        - policyName: disallow-non-harbor-images
          ruleNames:
          - '*'
        - policyName: disallow-privilege-escalation
          ruleNames:
          - '*'
        - policyName: disallow-privilege-escalation-not-strict
          ruleNames:
          - '*'
        - policyName: disallow-privileged-containers
          ruleNames:
          - '*'
        - policyName: disallow-proc-mount
          ruleNames:
          - '*'
        - policyName: disallow-selinux
          ruleNames:
          - '*'
        - policyName: require-non-root-groups
          ruleNames:
          - '*'
        - policyName: require-ro-rootfs
          ruleNames:
          - '*'
        - policyName: require-run-as-non-root-user
          ruleNames:
          - '*'
        - policyName: require-run-as-nonroot
          ruleNames:
          - '*'
        - policyName: restrict-apparmor-profiles
          ruleNames:
          - '*'
        - policyName: restrict-polex-namespaces
          ruleNames:
          - '*'
        - policyName: restrict-policy-kind-wildcards
          ruleNames:
          - '*'
        - policyName: restrict-seccomp
          ruleNames:
          - '*'
        - policyName: restrict-seccomp-strict
          ruleNames:
          - '*'
        - policyName: restrict-sysctls
          ruleNames:
          - '*'
        - policyName: restrict-volume-types
          ruleNames:
          - '*'
        match:
          any:
          - resources:
              kinds:
              - Deployment
              - ReplicaSet
              - Pod
              - StatefulSet
              namespaces:
              - sonobuoy
              names:
              - '*'
          - resources:
              kinds:
              - Deployment
              - ReplicaSet
              - Pod
              - StatefulSet
              - CronJob
              - DaemonSet
              - Job
              - ReplicationController
              namespaceSelector:
                matchExpressions:
                - key: e2e-run
                  operator: Exists
              names:
              - '*'
      END
      )

      echo "$PSS" | kubectl --kubeconfig "${WC_KUBECONFIG}" apply -f -
  - name: run-tests
    image: gsoci.azurecr.io/giantswarm/sonobuoy:v0.57.1-alpine-giantswarm
    securityContext:
      runAsUser: 0
      runAsGroup: 0
    env:
      - name: PROVIDER
        value: $(params.PROVIDER)
      - name: REGION
        value: $(params.REGION)
      - name: MC_KUBECONFIG
        value: $(params.MC_KUBECONFIG)
      - name: "WC_KUBECONFIG"
        value: $(workspaces.cluster.path)/kubeconfig
    script: |
      #! /bin/sh
      echo "Provider: '${PROVIDER}'"
      echo "Region: '${REGION}'"
      echo "MC Kubeconfig path: '${MC_KUBECONFIG}'"
      echo "WC Kubeconfig path: '${WC_KUBECONFIG}'"

      /sonobuoy run --kubeconfig "${WC_KUBECONFIG}" --mode=certified-conformance --wait
  volumes:
    - name: kubeconfig
      secret:
        secretName: sonobuoy-kubeconfig
