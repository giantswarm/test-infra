apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: manage-sonobuoy-results
  namespace: test-workloads
spec:
  workspaces:
    - name: cluster
      description: Cluster information is stored here.
  params:
    - name: results-path
      type: string
      description: Path where results will be stored.
      default: "$(workspaces.cluster.path)/sonobuoy-results.tar"
    - name: sonobuoy-namespace
      type: string
      description: Namespace that sonobuoy will create to store its resources.
      default: "sonobuoy"
    - name: kubeconfig
      type: string
      description: "Path of kubeconfig file to access cluster"
  steps:
    - name: manage-sonobuoy-results
      image: quay.io/giantswarm/sonobuoy:v0.56.7-alpine-giantswarm
      env:
        - name: KUBECONFIG
          value: $(params.kubeconfig)
      script: |
        #! /bin/sh

        set -e

        cleanup() {
          /sonobuoy delete --namespace "$(params.sonobuoy-namespace)" --kubeconfig "${KUBECONFIG}" --all --wait || true
        }

        trap cleanup INT TERM EXIT

        /sonobuoy status --namespace "$(params.sonobuoy-namespace)" --kubeconfig "${KUBECONFIG}"

        echo Retrieving logs...
        set +e
        ok="false"
        for i in $(seq 1 5); do
          /sonobuoy retrieve --namespace "$(params.sonobuoy-namespace)" --kubeconfig "${KUBECONFIG}" -f "$(params.results-path)"
          success=$?
          if [ "$success" -eq "0" ]; then
            ok="true"
            break
          fi
          sleep 5
        done
        set -e

        if [ "$ok" != "true" ]
        then
          echo "Failed to retrieve test results"
          cleanup
          exit 1
        fi

        echo Results:
        /sonobuoy results "$(params.results-path)"
        /sonobuoy results "$(params.results-path)" --mode detailed

        if /sonobuoy status --namespace "$(params.sonobuoy-namespace)" --kubeconfig "${KUBECONFIG}" | grep failed >/dev/null; then
          echo Found failed tests in sonobuoy status
          exit 1
        fi
      volumeMounts:
        - mountPath: /etc/kubeconfig
          name: kubeconfig
  volumes:
    - name: kubeconfig
      secret:
        secretName: sonobuoy-kubeconfig
