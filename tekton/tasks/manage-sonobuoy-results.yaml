apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: manage-sonobuoy-results
  namespace: test-workloads
spec:
  workspaces:
    - name: cluster
      description: Cluster information is stored here.
  params:
    - name: kubeconfig-path
      type: string
      description: Kubeconfig path for the cluster where sonobuoy will run.
    - name: results-path
      type: string
      description: Path where results will be stored.
      default: "$(workspaces.cluster.path)/sonobuoy-results.tar"
    - name: sonobuoy-namespace
      type: string
      description: Namespace that sonobuoy will create to store its resources.
      default: "sonobuoy"
  steps:
    - name: manage-sonobuoy-results
      image: quay.io/giantswarm/sonobuoy-alpine:0.0.0-c9ca8ce9fecc3577efcad9f1d3edba3d984a4821
      script: |
        #! /bin/sh

        set -e

        cleanup() {
          echo trapped
          /sonobuoy delete --namespace "$(params.sonobuoy-namespace)" --kubeconfig "$(params.kubeconfig-path)" --all --wait || true
        }

        trap cleanup INT TERM EXIT

        echo status:
        /sonobuoy status --namespace "$(params.sonobuoy-namespace)" --kubeconfig "$(params.kubeconfig-path)"

        echo Retrieving: /sonobuoy retrieve --namespace "$(params.sonobuoy-namespace)" --kubeconfig "$(params.kubeconfig-path)"
        outfile=$(/sonobuoy retrieve --namespace "$(params.sonobuoy-namespace)" --kubeconfig "$(params.kubeconfig-path)")

        echo "$outfile" results:
        /sonobuoy results "$outfile"

        echo "$outfile" detailed results:
        /sonobuoy results "$outfile" --mode detailed

        echo moving $outfile to "$(params.results-path)" AKA $(params.results-path)
        mv "$outfile" "$(params.results-path)"

        if /sonobuoy status --namespace "$(params.sonobuoy-namespace)" --kubeconfig "$(params.kubeconfig-path)" | grep failed >/dev/null; then
          echo failed
          exit 1
        fi
      volumeMounts:
        - mountPath: /etc/kubeconfig
          name: kubeconfig
  volumes:
    - name: kubeconfig
      secret:
        secretName: sonobuoy-kubeconfig
