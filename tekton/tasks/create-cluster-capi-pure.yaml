apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-cluster-openstack
  namespace: test-workloads
spec:
  params:
  - name: REPO_NAME
    type: string
  - name: provider
    type: string
  - name: installation
    type: string
  - name: cluster-catalog
    type: string
  - name: cluster-chart
    type: string
  - name: default-apps-catalog
    type: string
  - name: default-apps-chart
    type: string
  volumes:
  - name: kubeconfig
    secret:
      secretName: standup-kubeconfig
  workspaces:
  - name: cluster
    description: Cluster information is stored here.
  resources:
    inputs:
    - name: source-repo
      type: git
  results:
  - name: cluster-id
    description: The ID of the created cluster.
  steps:
  - name: create-cluster
    image: quay.io/giantswarm/kubectl-gs:2.3.0
    env:
    - name: REPO_NAME
      value: $(params.REPO_NAME)
    - name: PROVIDER
      value: $(params.provider)
    - name: INSTALLATION
      value: $(params.installation)
    - name: CLUSTER_CATALOG
      value: $(params.cluster-catalog)
    - name: CLUSTER_CHART
      value: $(params.cluster-chart)
    - name: DEFAULT_APPS_CATALOG
      value: $(params.default-apps-catalog)
    - name: DEFAULT_APPS_CHART
      value: $(params.default-apps-chart)
    volumeMounts:
      - name: kubeconfig
        mountPath: /etc/kubeconfig
    script: |
      #! /bin/sh

      set -e
      set -x

      export KUBECONFIG=/etc/kubeconfig/$PROVIDER
      cluster_id="tktn$(date +%s | cut -c5-10)"
      repo_version=${$(git describe --tags --abbrev=0)/v/""}-$(git describe --always --abbrev=0)
      
      echo $repo_version
      
      version_flags = ""
      if [ "$REPO_NAME" = "$DEFAULT_APPS_CHART" ]; then
        version_flags="--default-apps-version $repo_version"
      else
        version_flags="--cluster-version $repo_version"
      fi

      echo $version_flags

      echo "generating template for cluster $cluster_id"

      if [ "$PROVIDER" = "openstack" ]; then
        kubectl-gs template cluster \
          --provider openstack \
          --organization multi-project \
          --description "e2e test" \
          --name $cluster_id \
          --worker-failure-domain gb-lon-1 \
          --cloud openstack \
          --cloud-config cloud-config-giantswarm-2 \
          --bastion-image 8f0ccaf8-501e-4760-97cc-fbb8b812eb50 \
          --worker-image 857c9ff3-ac41-4aa3-bfde-2bb0cc4600f1 \
          --control-plane-image 857c9ff3-ac41-4aa3-bfde-2bb0cc4600f1 \
          --external-network-id cdbcb519-1f91-43fb-b0a9-312f0abf8f12 \
          --node-cidr 10.6.0.0/24 \
          --bastion-machine-flavor n1.tiny \
          --control-plane-machine-flavor n1.small \
          --worker-machine-flavor n1.small \
          --control-plane-disk-size 50 \
          --worker-disk-size 50 \
          --control-plane-az gb-lon-1 \
          --worker-replicas 2 \
          --bastion-boot-from-volume \
          --control-plane-boot-from-volume \
          --worker-boot-from-volume \
          --enable-long-names \
          --cluster-catalog $CLUSTER_CATALOG \
          --default-apps-catalog $DEFAULT_APPS_CATALOG \
          $version_flags \
          --output /tmp/cluster.yaml
      else
        echo "provider $PROVIDER not supported"
        exit 1
      fi

      echo -n "${cluster_id}" > $(workspaces.cluster.path)/cluster-id
      echo -n "openstack" > $(workspaces.cluster.path)/installation
      echo -n "kvm" > $(workspaces.cluster.path)/provider
      echo -n "${cluster_id}" > $(results.cluster-id.path)

      kubectl apply -f /tmp/cluster.yaml

      while ! kubectl get secrets -n org-multi-project ${cluster_id}-kubeconfig; do echo "waiting for kubeconfig"; sleep 10; done
      kubectl get secrets -n org-multi-project ${cluster_id}-kubeconfig -o jsonpath='{.data.value}' | base64 -d > $(workspaces.cluster.path)/kubeconfig

      cat $(workspaces.cluster.path)/kubeconfig

      exit $success
