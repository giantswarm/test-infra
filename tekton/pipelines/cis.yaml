apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cis
  namespace: test-workloads
spec:
  resources:
  - name: releases
    type: git
  workspaces:
  - name: cluster
  params:
    - name: PROW_JOB_ID
      type: string
    - name: REGION
      type: string
      default: "default"
      description: Region to run the test on. Can be either 'china' or 'default' (aws only).
  tasks:
  - name: detect-test-env
    taskRef:
      name: detect-test-env
    workspaces:
      - name: cluster
        workspace: cluster
    params:
      - name: REGION
        value: "$(params.REGION)"
    resources:
      inputs:
      - name: releases
        resource: releases
  - name: create-release
    params:
      - name: PROVIDER
        value: "$(tasks.detect-test-env.results.provider)"
      - name: MC_KUBECONFIG
        value: "$(tasks.detect-test-env.results.mc-kubeconfig)"
      - name: RELEASE
        value: "$(tasks.detect-test-env.results.release)"
    taskRef:
      name: create-release
    workspaces:
    - name: cluster
      workspace: cluster
    resources:
      inputs:
      - name: releases
        resource: releases

  - name: create-cluster
    runAfter: [create-release]
    taskRef:
      name: create-cluster-capi-hybrid
    params:
      - name: PROVIDER
        value: "$(tasks.detect-test-env.results.provider)"
      - name: REGION
        value: "$(tasks.detect-test-env.results.region)"
      - name: MC_KUBECONFIG
        value: "$(tasks.detect-test-env.results.mc-kubeconfig)"
      - name: RELEASE
        value: "$(tasks.create-release.results.release)"
    workspaces:
    - name: cluster
      workspace: cluster

  - name: wait-for-ready
    runAfter: [create-cluster]
    timeout: 1h0m0s
    taskRef:
      name: wait-for-ready
    params:
      - name: PROVIDER
        value: "$(tasks.detect-test-env.results.provider)"
    workspaces:
      - name: cluster
        workspace: cluster

  - name: run-tests
    runAfter: [wait-for-ready]
    taskRef:
      name: cis
    workspaces:
    - name: cluster
      workspace: cluster

  - name: manage-sonobuoy-results
    runAfter: [run-tests]
    taskRef:
      name: manage-sonobuoy-results
    params:
      - name: sonobuoy-namespace
        value: "$(tasks.create-cluster.results.cluster-id)-sonobuoy"
      - name: kubeconfig
        value: "$(workspaces.cluster.path)/kubeconfig"
    workspaces:
      - name: cluster
        workspace: cluster

  finally:
  - name: upload-to-s3-bucket # executed only when tests fail
    when:
      - input: $(tasks.manage-sonobuoy-results.status)
        operator: in
        values: ["Failed"]
    taskRef:
      name: upload-to-s3-bucket
    params:
      - name: prow-job-id
        value: "$(params.PROW_JOB_ID)"
      - name: file-to-upload
        value: $(workspaces.cluster.path)/sonobuoy-results.tar
    workspaces:
      - name: cluster
        workspace: cluster

  - name: cleanup
    taskRef:
      name: cleanup-capi-hybrid
    params:
      - name: MC_KUBECONFIG
        value: "$(tasks.detect-test-env.results.mc-kubeconfig)"
    workspaces:
    - name: cluster
      workspace: cluster
