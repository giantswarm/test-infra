apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cncf
  namespace: test-workloads
spec:
  resources:
  - name: releases
    type: git
  workspaces:
  - name: sonobuoy
  params:
  - name: PROW_JOB_ID
    type: string
  tasks:
  - name: create-release
    params:
    - name: pipeline-name
      value: "$(context.pipeline.name)"
    taskRef:
      name: create-release
    resources:
      inputs:
      - name: releases
        resource: releases

  - name: create-cluster
    runAfter: [create-release]
    taskRef:
      name: create-cluster
    params:
    - name: installation
      value: "$(tasks.create-release.results.installation)"
    - name: release-id
      value: "$(tasks.create-release.results.release-id)"

  - name: wait-for-ready
    runAfter: [create-cluster]
    timeout: 1h0m0s
    taskRef:
      name: wait-for-ready
    params:
      - name: kubeconfig
        value: "$(tasks.create-cluster.results.kubeconfig)"
      - name: provider
        value: "$(tasks.create-release.results.provider)" 

  - name: run-tests
    runAfter: [wait-for-ready]
    timeout: 5h0m0s
    taskRef:
      name: cncf
    params:
      - name: kubeconfig
        value: "$(tasks.create-cluster.results.kubeconfig)"

  - name: manage-sonobuoy-results
    runAfter: [run-tests]
    taskRef:
      name: manage-sonobuoy-results
    params:
      - name: kubeconfig
        value: "$(tasks.create-cluster.results.kubeconfig)"
    workspaces:
    - name: sonobuoy
      workspace: sonobuoy

  - name: upload-to-s3-bucket
    runAfter: [manage-sonobuoy-results]
    taskRef:
      name: upload-to-s3-bucket
    params:
    - name: prow-job-id
      value: "$(params.PROW_JOB_ID)"
    - name: file-to-upload
      value: $(workspaces.sonobuoy.path)/sonobuoy-results.tar
    workspaces:
    - name: sonobuoy
      workspace: sonobuoy

  finally:
  - name: cleanup
    taskRef:
      name: cleanup
    params:
      - name: cluster-id
        value: "$(tasks.create-cluster.results.cluster-id)"
      - name: release-id
        value: "$(tasks.create-release.results.release-id)"
      - name: installation
        value: "$(tasks.create-release.results.installation)"
